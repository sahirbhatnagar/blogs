knitr::opts_chunk$set(echo = TRUE)
knitr::knit_exit()
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load('brms')
pacman::p_load('MASS')
rm(list=ls())
# number of subjects
n = 500
# number of time points
t = 2
# SNR
signal_to_noise_ratio = 2
# true coefficient vector
b <- c(2,3)
# simulate independent covariates
A <- rnorm(n*t)
B <- rnorm(n*t)
# random effect: same for time 1 and time 2
random_eff <- rnorm(n)
y.star <- b[1] + b[2]*A + b[2]^2 * B + rep(random_eff,2)
error <- rnorm(n*t)
k <- sqrt(stats::var(y.star)/(signal_to_noise_ratio*stats::var(error)))
# response
yij <- y.star + k*error
dat1 <- data.frame(yij, aij = A, bij = B, ID = rep(1:n, times = 2))
(prior <- get_prior(bf(yij ~ alpha + beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
alpha ~ 1,
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2:7)] <- "normal(0,10)"
prior$prior[9:10] <- "student_t(3, 0, 11)"
make_stancode(bf(yij ~ alpha + beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
alpha ~ 1,
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
fit1 <- brms::brm(bf(yij ~ alpha + beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
alpha ~ 1,
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior,
control = list(adapt_delta = 0.9),
iter = 5000, thin = 2, chains = 6, cores = 6)
summary(fit1)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_exit()
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load('brms')
pacman::p_load('MASS')
rm(list=ls())
# number of subjects
n = 500
# number of time points
t = 2
# SNR
signal_to_noise_ratio = 2
# true coefficient vector
b <- c(2,3)
# simulate independent covariates
A <- rnorm(n*t)
B <- rnorm(n*t)
# random effect: same for time 1 and time 2
random_eff <- rgamma(n,shape = 2)
y.star <- b[1] + b[2]*A + b[2]^2 * B + rep(random_eff,2)
error <- rnorm(n*t)
k <- sqrt(stats::var(y.star)/(signal_to_noise_ratio*stats::var(error)))
# response
yij <- y.star + k*error
dat1 <- data.frame(yij, aij = A, bij = B, ID = rep(1:n, times = 2))
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_exit()
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load('brms')
rm(list=ls())
# number of subjects
n = 500
# number of time points
t = 2
# SNR
signal_to_noise_ratio = 2
# true coefficient value
b <- 3
# simulate independent covariates
A <- rnorm(n*t)
B <- rnorm(n*t)
# random effect: same for time 1 and time 2
random_eff <- rgamma(n, shape = 2)
y.star <- b * A + b^2 * B + rep(random_eff,2)
error <- rnorm(n*t)
k <- sqrt(stats::var(y.star)/(signal_to_noise_ratio*stats::var(error)))
# response
yij <- y.star + k*error
dat1 <- data.frame(yij, aij = A, bij = B, ID = rep(1:n, times = 2))
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 0 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2:3)] <- "normal(0,10)"
prior$prior[5:6] <- "student_t(3, 0, 11)"
prior
make_stancode(bf(yij ~ alpha + beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
alpha ~ 1,
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2:5)] <- "normal(0,10)"
prior
prior$prior[7:8] <- "student_t(3, 0, 11)"
prior
make_stancode(bf(yij ~ alpha + beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
alpha ~ 1,
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
make_stancode(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
fit1 <- brms::brm(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior,
control = list(adapt_delta = 0.9),
iter = 1000, thin = 1, chains = 6, cores = 6)
summary(fit1)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_exit()
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load('brms')
rm(list=ls())
# number of subjects
n = 500
# number of time points
t = 2
# SNR
signal_to_noise_ratio = 2
# true coefficient value
b <- 3
# simulate independent covariates
A <- rnorm(n*t)
B <- rnorm(n*t)
# random effect: same for time 1 and time 2
random_eff <- rgamma(n, shape = 2)
y.star <- b * A + b^2 * B + rep(random_eff,2)
error <- rnorm(n*t)
k <- sqrt(stats::var(y.star)/(signal_to_noise_ratio*stats::var(error)))
# response
yij <- y.star + k*error
dat1 <- data.frame(yij, aij = A, bij = B, ID = rep(1:n, times = 2))
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2:5)] <- "normal(0,10)"
prior$prior[7:8] <- "student_t(3, 0, 11)"
prior
make_stancode(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
fit1 <- brms::brm(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior,
control = list(adapt_delta = 0.9),
iter = 10000, thin = 2, chains = 6, cores = 6)
summary(fit1)
plot(fit1)
plot(marginal_effects(fit1), points = TRUE, ask = FALSE)
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2:5,8)] <- "normal(0,10)"
prior$prior[7] <- "student_t(3, 0, 11)"
prior
make_stancode(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
fit1 <- brms::brm(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior,
control = list(adapt_delta = 0.9),
iter = 10000, thin = 2, chains = 6, cores = 6)
summary(fit1)
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_exit()
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load('brms')
rm(list=ls())
# number of subjects
n = 500
# number of time points
t = 2
# SNR
signal_to_noise_ratio = 2
# true coefficient value
b <- 3
# simulate independent covariates
A <- rnorm(n*t)
B <- rnorm(n*t)
# random effect: same for time 1 and time 2
random_eff <- rnorm(n, sd = 2)
y.star <- b * A + b^2 * B + rep(random_eff,2)
error <- rnorm(n*t)
k <- sqrt(stats::var(y.star)/(signal_to_noise_ratio*stats::var(error)))
# response
yij <- y.star + k*error
dat1 <- data.frame(yij, aij = A, bij = B, ID = rep(1:n, times = 2))
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2:5,7:8)] <- "normal(0,10)"
prior
make_stancode(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
fit1 <- brms::brm(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior,
control = list(adapt_delta = 0.9),
iter = 10000, thin = 2, chains = 6, cores = 6)
summary(fit1)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_exit()
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load('brms')
rm(list=ls())
# number of subjects
n = 500
# number of time points
t = 2
# SNR
signal_to_noise_ratio = 2
# true coefficient value
b <- 3
# simulate independent covariates
A <- rgamma(n*t, shape = 3)
B <- rnorm(n*t)
# random effect: same for time 1 and time 2
random_eff <- rnorm(n, sd = 1.5)
y.star <- b * A + b^2 * B + rep(random_eff,2)
error <- rnorm(n*t)
k <- sqrt(stats::var(y.star)/(signal_to_noise_ratio*stats::var(error)))
# response
yij <- y.star + k*error
dat1 <- data.frame(yij, aij = A, bij = B, ID = rep(1:n, times = 2))
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2:5,8)] <- "normal(0,10)"
prior$prior[7] <- "student_t(3, 0, 11)"
prior
make_stancode(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
prior
prior
get_prior(rating ~ treat + period + carry + (1|subject),
data = inhaler, family = cumulative())
prior <- c(prior_string("normal(0,10)", class = "b", nlpar = "alpha"),
prior_string("normal(0,10)", class = "b", nlpar = "beta"),
prior_(~cauchy(0,2), class = ~sd,
group = ~ID, nlpar = ~mui, coef = ~ Intercept))
make_stancode(rating ~ treat + period + carry + (1|subject),
data = inhaler, family = cumulative(),
prior = prior)
get_prior(rating ~ treat + period + carry + (1|subject),
data = inhaler, family = cumulative())
prior <- c(prior_string("normal(0,10)", class = "b"),
prior(normal(1,2), class = b, coef = treat),
prior_(~cauchy(0,2), class = ~sd,
group = ~subject, coef = ~Intercept))
prior
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2:5)] <- "normal(0,10)"
prior$prior[8] <- "student_t(3, 0, 11)"
prior
make_stancode(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
fit1 <- brms::brm(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior,
control = list(adapt_delta = 0.9),
iter = 10000, thin = 2, chains = 6, cores = 6)
summary(fit1)
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
get_prior(rating ~ treat + period + carry + (1|subject),
data = inhaler, family = cumulative())
prior <- c(prior_string("normal(0,10)", class = "b"),
prior(normal(1,2), class = b, coef = treat),
prior_(~cauchy(0,2), class = ~sd,
group = ~subject, coef = ~Intercept))
prior
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2,4)] <- "normal(0,10)"
random_eff <- rpois(n, lambda = 10)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_exit()
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load('brms')
rm(list=ls())
# number of subjects
n = 500
# number of time points
t = 2
# SNR
signal_to_noise_ratio = 2
# true coefficient value
b <- 3
# simulate independent covariates
A <- rgamma(n*t, shape = 3)
B <- rnorm(n*t)
# random effect: same for time 1 and time 2
random_eff <- rpois(n, lambda = 10)
y.star <- b * A + b^2 * B + rep(random_eff,2)
error <- rnorm(n*t)
k <- sqrt(stats::var(y.star)/(signal_to_noise_ratio*stats::var(error)))
# response
yij <- y.star + k*error
dat1 <- data.frame(yij, aij = A, bij = B, ID = rep(1:n, times = 2))
(prior <- get_prior(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
prior$prior[c(2,4)] <- "normal(0,10)"
prior$prior[8] <- "student_t(3, 0, 11)"
prior
make_stancode(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 +  (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior)
fit1 <- brms::brm(bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian(),
prior = prior,
control = list(adapt_delta = 0.9),
iter = 10000, thin = 2, chains = 6, cores = 6)
summary(fit1)
plot(fit1)
plot(marginal_effects(fit1), points = TRUE, ask = FALSE)
(prior <- brms::get_prior(brms::bf(yij ~ beta * aij + (beta^2) * bij + mui,
mui ~ 1 + (1|ID),
beta ~ 1,
nl = TRUE),
data = dat1,
family = gaussian()))
plot(marginal_effects(fit1), points = TRUE, ask = FALSE)
plot(fit1)
jpeg(filename = "/home/sahir/git_repositories/sahirbhatnagar.github.io/img/bayes_plot.jpeg")
plot(fit1)
dev.off()
jpeg(filename = "/home/sahir/git_repositories/sahirbhatnagar.github.io/img/bayes_plot.jpeg")
plot(fit1)
dev.off()
jpeg(filename = "/home/sahir/git_repositories/sahirbhatnagar.github.io/img/bayes_plot.jpeg",
res = 120, units = "in", width = 7, height = 8)
plot(fit1)
plot(fit1)
dev.off()
jpeg(filename = "/home/sahir/git_repositories/sahirbhatnagar.github.io/img/bayes_plot.jpeg",
res = 120, units = "in", width = 8, height = 11)
plot(fit1)
dev.off()
dev.off()
jpeg(filename = "/home/sahir/git_repositories/sahirbhatnagar.github.io/img/bayes_plot.jpeg",
res = 120, units = "in", width = 8, height = 11)
plot(fit1)
dev.off()
jpeg(filename = "/home/sahir/git_repositories/sahirbhatnagar.github.io/img/bayes_plot.jpeg",
res = 120, units = "in", width = 11, height = 8)
plot(fit1)
plot(fit1)
dev.off()
jpeg(filename = "/home/sahir/git_repositories/sahirbhatnagar.github.io/img/bayes_plot.jpeg",
res = 75, units = "in", width = 11, height = 8)
plot(fit1)
dev.off()
setwd("~/git_repositories/sahirbhatnagar.github.io")
servr::jekyll(script = "_knitr/build.R", serve = FALSE)
res <- summary(fit1)
res
res$random$ID
res$random$ID[1]
(res <- summary(fit1))
res$random$ID[3]
servr::jekyll(script = "_knitr/build.R", serve = FALSE)
servr::jekyll(script = "_knitr/build.R", serve = FALSE)
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
print(sessionInfo(), locale = F)
servr::jekyll(script = "_knitr/build.R", serve = FALSE)
